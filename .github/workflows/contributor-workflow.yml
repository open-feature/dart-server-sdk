# This workflow analyzes the Dart Server SDK and an example project

name: Contributor Workflow

on:
  workflow_call: # Makes the workflow reusable
    inputs:
      branch_name:
        required: true
        type: string
      event_name:
        required: true
        type: string

jobs:
  analyze-core:
    name: Analyze Core Dart Server SDK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          dart-version: stable

      - name: Install Dependencies
        run: |
          echo "Installing dependencies for core SDK..."
          if ! dart pub get; then
            echo "❌ Failed to install dependencies for the core SDK. Exiting..."
            exit 1
          fi

      - name: Check for Outdated Dependencies
        run: |
          echo "Checking for outdated dependencies..."
          dart pub outdated || true

      - name: Run Static Analysis
        run: |
          echo "Running static analysis for core SDK..."
          if ! dart analyze lib/ > analysis_report.txt 2> error_log.txt; then
            echo "❌ Static analysis failed with errors. See details below:"
            cat error_log.txt
            exit 1
          else
            echo "✅ Static analysis completed successfully. No critical errors found."
          fi

      - name: Categorize and Count Analysis Results
        run: |
          echo "Categorizing analysis results..."
          
          grep -i "info" analysis_report.txt > info_report.txt || echo "No informational messages found."
          grep -i "warning" analysis_report.txt > warning_report.txt || echo "No warnings found."
          grep -i "error" analysis_report.txt > error_report.txt || echo "No errors found."

          INFO_COUNT=$(wc -l < info_report.txt || echo 0)
          WARNING_COUNT=$(wc -l < warning_report.txt || echo 0)
          ERROR_COUNT=$(wc -l < error_report.txt || echo 0)

          echo "Summary of analysis results:"
          echo "Informational messages: $INFO_COUNT"
          echo "Warnings: $WARNING_COUNT"
          echo "Errors: $ERROR_COUNT"
          echo ""

          if [[ $INFO_COUNT -gt 0 ]]; then
            echo "Informational messages:"
            cat info_report.txt
            echo ""
          fi
          if [[ $WARNING_COUNT -gt 0 ]]; then
            echo "Warnings:"
            cat warning_report.txt
            echo ""
          fi
          if [[ $ERROR_COUNT -gt 0 ]]; then
            echo "Errors:"
            cat error_report.txt
            echo ""
          fi

      - name: Identify Specific Commits for Issues
        run: |
          echo "Identifying specific commits for issues in the core SDK..."
          
          while IFS= read -r line; do
            file=$(echo $line | awk -F ':' '{print $1}')
            if [[ -n "$file" ]]; then
              git_log=$(git log -n 1 --pretty=format:"%h by %an <%ae>" -- "$file")
              echo "File: $file"
              echo "Issue: $line"
              echo "Commit: $git_log"
            else
              echo "No file information could be extracted for: $line"
            fi
          done < analysis_report.txt

      - name: Upload Analysis Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: core-sdk-analysis
          path: |
            dart-server-sdk-openfeature/analysis_report.txt
            dart-server-sdk-openfeature/error_log.txt
            dart-server-sdk-openfeature/info_report.txt
            dart-server-sdk-openfeature/warning_report.txt
            dart-server-sdk-openfeature/error_report.txt
          retention-days: 7