name: Contributor Workflow

on:
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string
      event_name:
        required: true
        type: string

jobs:
  analyze-core:
    name: Analyze Core Dart Server SDK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          dart-version: stable

      - name: dart --version
        run: dart --version

      - name: Install Dependencies
        run: |
          echo "Installing dependencies for core SDK..."
          dart pub get

      - name: Check for Outdated Dependencies (non-blocking)
        run: |
          echo "Checking for outdated dependencies..."
          dart pub outdated || true

      - name: Run Static Analysis (capture, do not fail)
        id: analyze
        run: |
          set -euo pipefail
          mkdir -p artifacts/core-sdk
          echo "Running static analysis for core SDK..."
          # If you want warnings to be fatal, add: --fatal-warnings
          # If you want infos to be fatal, add: --fatal-infos
          if dart analyze lib/ --format=human > artifacts/core-sdk/analysis_report.txt 2>&1; then
            echo "analyze_exit=0" >> $GITHUB_OUTPUT
            echo "✅ Static analysis completed successfully."
          else
            echo "analyze_exit=$?" >> $GITHUB_OUTPUT
            echo "❌ Static analysis reported issues. (See artifacts/core-sdk/analysis_report.txt)"
          fi

      - name: Categorize and Count Analysis Results
        run: |
          set -euo pipefail
          rpt="artifacts/core-sdk/analysis_report.txt"
          [[ -f "$rpt" ]] || { echo "Report not found: $rpt"; exit 0; }

          # Split into buckets (case-insensitive)
          grep -i " info "    "$rpt" > artifacts/core-sdk/info_report.txt     || true
          grep -i " warning " "$rpt" > artifacts/core-sdk/warning_report.txt  || true
          grep -i " error "   "$rpt" > artifacts/core-sdk/error_report.txt    || true

          INFO_COUNT=$(wc -l < artifacts/core-sdk/info_report.txt     || echo 0)
          WARNING_COUNT=$(wc -l < artifacts/core-sdk/warning_report.txt || echo 0)
          ERROR_COUNT=$(wc -l < artifacts/core-sdk/error_report.txt   || echo 0)

          echo "Summary of analysis results:"
          echo "Infos:    $INFO_COUNT"
          echo "Warnings: $WARNING_COUNT"
          echo "Errors:   $ERROR_COUNT"
          echo ""

          # (Optional) echo contents for visibility
          [[ $ERROR_COUNT -gt 0 ]]   && { echo "Errors:";   cat artifacts/core-sdk/error_report.txt;   echo ""; }
          [[ $WARNING_COUNT -gt 0 ]] && { echo "Warnings:"; cat artifacts/core-sdk/warning_report.txt; echo ""; }
          [[ $INFO_COUNT -gt 0 ]]    && { echo "Infos:";    cat artifacts/core-sdk/info_report.txt;    echo ""; }

      - name: Identify Specific Commits for Issues
        run: |
          set -euo pipefail
          rpt="artifacts/core-sdk/analysis_report.txt"
          [[ -f "$rpt" ]] || exit 0

          echo "Identifying specific commits for files mentioned in the report..."
          while IFS= read -r line; do
            file=$(echo "$line" | awk -F ':' '{print $1}')
            if [[ -n "$file" && -f "$file" ]]; then
              git_log=$(git log -n 1 --pretty=format:"%h by %an <%ae>" -- "$file" || true)
              echo "File:   $file"
              echo "Issue:  $line"
              echo "Commit: ${git_log:-N/A}"
              echo ""
            fi
          done < "$rpt"

      - name: Upload Analysis Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: core-sdk-analysis
          path: artifacts/core-sdk/*
          retention-days: 7

      # (Optional) decide whether to fail the job based on analyze exit + policy
      - name: Fail if analysis had errors
        if: steps.analyze.outputs.analyze_exit != '0'
        run: |
          echo "Failing the job because dart analyze returned a non-zero exit code."
          exit 1
